swagger: '2.0'
info:
  title: Popsical V2 API
  version: "2"

  description: |
    Version 2
    --

    all endpoints path must be prefixed with `/v2`

    e.g https://api.popsical.tv/v2/genres.json

    Authentication
    --------------

    Popsical API uses OAuth2 to issue access token.

    All apps/client needs to be registered in order to access Popsical API endpoints.

    Once registered, you will receive

    `client_id` - Api Key as identifier of your app

    `secret` - Secret Key

    `callback_url` - as specified by client

    Pagination
    ---------

    Resources with meta object indicates the resource endpoint has pagination. For example the following:

    ```JSON
    {
      "resources": [],
      ..
      ..
      "meta": {
        "total": 3,
        "current_page": 1,
        "num_pages": 1,
        "per_page": 25
      }
    }
    ```


    `total` - total entries of items.

    `current_page` - the current page.

    `per_page` - load number of items per page. Default is set to 25 items.

    `num_pages` - number of pages available to paginate.


    You can use the following query paramters to paginate the resource and load 4 items per page

    `/v2/resources.json?per_page=4&page=2`


    Errors
    ------

    A failed call will always result in either HTTP status code of >= 400 or 500. Failed JSON requests will also contain a response containing an error message and error code:

    ```JSON
      { error: 'not found', err_code: 1404 }
    ```

    Code defensively and do not assume err_code will always be present. If you get a return without a err_code please tell us so that we can include one.


    Custom err_code
    ------------------

    1400 - missing parameters

    1404 - not found error

    1401 - not authorized

    1403 - forbidden

    1407 - entity validation error e.g uniqueness (value already taken), presence validation errors

    1408 - TV IP address is not available

    1409 - Play token generation failed

    1410 - Play token authorization failed

    1411 - Language code does not exist

    1412 - Track already exist in play queue.

    1413 - TV Device ID is missing

    1414 - Country access blocked

    1415 - Platform access blocked

    1416 - Premium access blocked

    1417 - Term has expired

    1418 - Exceeding free daily time

    1500 - Internal server error

    Search
    ------

    We use algolia for search. Please refer to algolia API docs to perform search https://www.algolia.com/doc/rest-api/search/

    Requires Algolia API key to perform search.

# the domain of the service
host: api-staging.popsical.tv
# array of all schemes that your API supports
schemes:
  - https

# will be prefixed to all paths
basePath: /v2

securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://api-staging.popsical.tv/oauth/authorize'
    tokenUrl: 'https://api-staging.popsical.tv/oauth/token'
    scopes:
      public: "all public access"
      manage: "user resources"
      remote_mode: "device use as remote control for the TV"

produces:
  - application/json

consumes:
  - application/json

paths:
  /artists.json:
    get:
      summary: Get Artists
      description: |
        Fetch array of artist objects
      tags:
        - Artist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
      security:
        - OauthSecurity:
          - manage
          - remote_mode
      responses:
        200:
          description: Object with artists array & meta pagination information
          schema:
            type: object
            properties:
              artists:
                type: array
                items:
                  $ref: '#/definitions/Artist'
              meta:
                $ref: '#/definitions/Pagination'
        403:
          description: User forbidden
          schema:
            $ref: '#/definitions/ErrorForbidden'
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/ErrorUnprocessable'

  /artists/{id}.json:
    get:
      summary: Get Artist Object
      description: |
        Fetch artist object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: Artist ID
        - $ref: '#/parameters/trackIncludesParams'
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
      tags:
        - Artist
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Artists with playlist & meta pagination information
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Eminem
              gender:
                type: string
                example: m
              lang_codes:
                type: array
                items:
                  type: string
                  description: artist can have more than 1 language codes e.g 'en', 'zh'
                  example: en
              images:
                $ref: '#/definitions/Image'
              musixmatch_id:
                type: integer
                example: 1

  /tracks.json:
    get:
      summary: Get Tracks
      description: |
        Fetch array of track objects
      tags:
        - Track
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistGenreParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            type: object
            properties:
              tracks:
                type: array
                items:
                  $ref: '#/definitions/Track'
              meta:
                $ref: '#/definitions/Pagination'

  /tracks/{id}.json:
    get:
      summary: Get Track Object
      description: |
        Fetch track object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      tags:
        - Track
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            $ref: '#/definitions/Track'

  /tracks/{id}.json:
    get:
      summary: Get Track Object
      description: |
        Fetch track object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      tags:
        - Track
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            $ref: '#/definitions/Track'

    patch:
      summary: Patch Track Object
      description: |
        Patch track object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            type: object
            properties:
              runtime:
                type: integer
                description: Runtime value in second
                example: 300
      tags:
        - Track
      security:
        - OauthSecurity:
          - public manage
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            $ref: '#/definitions/Track'

  /tracks/lyrics/{id}.json:
    get:
      summary: Get Track Lyric Object
      description: |
        Fetch track lyric object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: track id
      tags:
        - Track Lyric
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks lyric information
          schema:
            $ref: '#/definitions/TrackLyric'

  /lists/popular.json:
    get:
      summary: Get Popular Playlists
      description: |
        returns an array of popular playlists sorted by popularity
      tags:
        - Playlist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'
        - $ref: '#/parameters/playlistArtistParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'
  /lists/history.json:
    get:
      summary: Get User's History Playlist with Tracks. The tracks object has playlist_track_id to support track removal from playlist
      parameters:
       - name: per_page
         in: query
         description: Number of tracks returned
         type: integer
       - name: page
         in: query
         description: Page number
         type: integer
      tags:
        - Playlist
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Playlist with tracks objects that can be paginated
          schema:
            $ref: '#/definitions/PlaylistPersonalTracks'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

  /notifications.json:
    post:
      summary:  Trigger notification service to send payload
      description: |
        Trigger notification service to send payload
      tags:
        - Notification
      parameters:
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            type: object
            properties:
              payload:
                type: object
                properties:
                  type:
                    type: string
                    example: add_play_queue_track
                  uuid:
                    type: string
                    example: cfc61baa-86e8-11e7-bb31-be2e44b06b34
                  created_at:
                    type: integer
                    description: seconds value since Epoch
                    example: 1503371978
              device_id:
                type: string
                example: "aae73aa5c1964c60"
              user_id:
                type: integer
                example: 23

      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Push notification information
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              id:
                type: string
                description: Push Notification ID
                example: 599e4a67792700280d9dc864

  /playlist_tracks/{id}.json:
    delete:
      summary: Remove Track from Playlist
      description: |
        Remove Tracks from Playlist.
      security:
        - OauthSecurity:
          - manage
          - remote_mode
      tags:
        - Playlist
      parameters:
        - name: id
          in: path
          description: ID is playlist_track_id
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}

  /playlists.json:
    get:
      summary: Get List of playlist
      description: |
        #### Filters

        Valid filters

        `lang` - Please refer `/v1/top_languages.json` for list of valid lang code.

        `genres` - Please refer to `v2/genres.json` for list of valid genres


        To eager load the tracks in the /playlists.json GET request, use the following:

        `includes=tracks`

        This will load maximum 8 tracks per playlists. It is advisable to use `per_page=8` to limit the number of playlist to load with the tracks. JSON can get really huge and may effect performance/network loading time.
        Please refer to `GET v1/playlist/:id.json` on handling playlists with tracks array object.

        Example usage:

        `/v2/playlists.json?lang=ms&genres=pop&artist_gender=f`
      tags:
        - Playlist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'
        - $ref: '#/parameters/playlistArtistParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'

  /playlists/{id}.json:
    get:
      summary: Get Playlist Object by ID
      parameters:
       - name: id
         in: path
         required: true
         type: integer
       - name: per_page
         in: query
         description: Number of playlist returned
         type: integer
       - name: page
         in: query
         description: Page number
         type: integer
      tags:
        - Playlist
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Playlist with tracks objects that can be paginated
          schema:
            $ref: '#/definitions/PlaylistWithTracks'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

  /play_times.json:
    post:
      summary: Add play time record
      description: |
        Store play time record
      tags:
        - PlayTime
      parameters:
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            $ref: '#/definitions/PlayTimePost'
      security:
        - OauthSecurity:
          - manage
      responses:
        200:
          description: TV device play time information
          schema:
            $ref: '#/definitions/PlayTime'

  /play_times/{device_uid}.json:
    get:
      summary: Fetch TV device play time
      parameters:
       - name: device_uid
         description: TV device UID
         in: path
         required: true
         type: string
      tags:
        - PlayTime
      security:
        - OauthSecurity:
          - manage
      responses:
        200:
          description: TV device play time information
          schema:
            $ref: '#/definitions/PlayTime'
        422:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

  /me/play_queue/tracks.json:
    post:
      summary: Add track(s) to the play queue
      description: |
        Add tracks to play queue
      security:
        - OauthSecurity:
          - manage
      tags:
        - PlayQueue
      parameters:
        - name: force_add
          in: query
          required: false
          type: boolean
          description: Set to true to force add track into play queue
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              device_uid:
                type: object
                example: cce43aa5c1924c20
              queue:
                type: array
                items:
                  type: object
                  properties:
                    track_id:
                      type: integer
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}
        422:
          description: |
            - Duplicate track already exist in play queue. Use force_add=true in query paramters to add anyway.
              * 1412 - Track already exist! Use 'force_add=true' to add anyway
            - Adding track is blocked because of exceeding free daily time (for basic subscription plan).
              * 1418 - Exceeding free daily time
          examples:
            application/json:
              { "errors": "Track already exist! Use 'force_add=true' to add anyway", "err_code": 1412 }

  /me/play_queue/add_next.json:
    post:
      summary: Add track to the next position of current track
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - manage
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              device_uid:
                type: object
                example: cce43aa5c1924c20
              track_id:
                type: integer
                example: 1
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok", "is_current": true}
        422:
          description: |
            Adding track is blocked because of exceeding free daily time (for basic subscription plan).
            * 1418 - Exceeding free daily time
          examples:
            application/json:
              { "errors": "Exceeding free daily time", "err_code": 1418 }

  /videos/{video_id}/streams.json:
    get:
      summary: Get Video Url
      parameters:
       - name: video_id
         in: path
         required: true
         type: integer
      tags:
        - Video
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Video Stream URL
          schema:
            $ref: '#/definitions/Stream'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

  /genres.json:
    get:
      summary: Lookup available genres
      description: |
        Returns all valid genres in collection
      tags:
        - Genre
        - Meta
      security:
        - OauthSecurity:
          - public
      parameters:
        - $ref: '#/parameters/playlistLangParams'
      responses:
        200:
          description: Object with genres array & meta pagination information
          schema:
            type: object
            properties:
              genres:
                type: array
                items:
                  $ref: '#/definitions/Genre'
              meta:
                $ref: '#/definitions/Pagination'

definitions:
  AuthToken:
    type: object
    properties:
      short_code:
        type: string
        description: Short code to display on the TV
        example: QNHTPP
      nonce:
        type: string
        description: Secure key to verify short code
        example: d7f303ca-dc6f-445d-8cb2-c338c87b3d9d
      verification_url:
        type: string
        description: Url for user to go to verify account & TV
        example: https://app.popsical.tv
      expires_in:
        type: integer
        description: Value in seconds until auth token expires
        example: 600
  AuthTokenPost:
    type: object
    properties:
      short_code:
        type: string
        description: Short code displayed on TV
        example: QNHTPP
      nonce:
        type: string
        description: Secure key to verify short code
        example: d7f303ca-dc6f-445d-8cb2-c338c87b3d9d
      device_id:
        type: string
        description: Your mobile android unique id
        example: popsical-tv
      client_id:
        type: string
        description: Your app oauth client id
        example: 7eb7794c1eb43584b91cd81b507e4d2fd09ae75a69307c0ecc9c3f6a5a88c338
  AuthTokenPostFB:
    type: object
    properties:
      facebook_token:
        type: string
        description: Facebook token
      device_id:
        type: string
        description: Your mobile android unique id
      client_id:
        type: string
        description: Your app oauth client id
      scope:
        type: string
        description: Oauth scope permission e.g public remote_mode
  AccessToken:
    type: object
    properties:
      access_token:
        type: string
        description: Include this in header -H Authorization Bearer access_token
        example: e9d9054a3b303a5fdf9a175ed18d9296535ca4e34159c50edebca681b117f152
      refresh_token:
        type: string
        description: Use refresh token when access_token has expired
        example: 649f6471f13f020f7ae31a43fbf443d5d64d21fa8290f16a868f4001fb837061
      expires_in:
        type: string
        description: timestamp of access token expiry
        example: 14400
      scope:
        type: string
        description: Scope allowed accessing resources
        example: public manage
  AccessTokenTV:
    title: AccessTokenTv
    type: object
    allOf:
      - $ref: '#/definitions/AccessToken'
      - properties:
          play_queue_id:
            type: integer
          tv_uid:
            type: string
          tv_ip_address:
            type: string
          tv_port:
            type: integer
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        example: jonsnow@mail.com
      first_name:
        type: string
        example: Jon
      last_name:
        type: string
        example: Snow
      profile_pic:
        type: string
        example: https://img/700b.jpg
      premium:
        type: boolean
        example: true
      devices:
        type: array
        items:
          $ref: '#/definitions/Device'
  Genre:
    type: object
    properties:
      key:
        type: string
        description: genre key
        example: rock
      name:
        type: string
        description: genre name
        example: Rock
      poster_url:
        type: string
        description: poster URL
        example: https://charaku.imgix.net/defaults/genre_bg/rock.jpg?auto=compress
      icon_url:
        type: string
        example: https://charaku.imgix.net/defaults/genre_icons/ic_rock.png?auto=compress

  Device:
    type: object
    properties:
      device_uid:
        type: string
        description: unique mobile device identifier
        example: device-id
      device_token:
        type: string
        description: unique token related to push notification
        example: abc123
      ip_address:
        type: string
        example: 192.168.1.1
      mac_address:
        type: string
        example: f2:b7:2a:5d:bf:1d
      port:
        type: integer
        example: 8080
      os:
        type: string
        example: android
      os_version:
        type: string
        example: 23
      type:
        type: string
        description: valid values e.g tv, remote
        example: tv

  DevicePost:
    type: object
    properties:
      device:
        $ref: '#/definitions/Device'

  Playlist:
    type: object
    properties:
      id:
        type: integer
        description: identifier of playlist. Use this id to fetch playlist object
      profile_id:
        type: integer
        description: profile_id 0 means internal generated id
      name:
        type: string
        description: name of playlist
      created_at:
        type: string
        format: date-time
        description: timestamp of creation in iso8601 timestamp format
      updated_at:
        type: string
        format: date-time
        description: timestamp of last updated in iso8601 timestamp format
      playlist_type:
        type: integer
        description: |
          Playlist type
          ---
          | 0 - Non-descript
          | 1 - User's Personal Playlist
          | 2 - User's History Playlist
          | 3 - Content Editor Curated Playlist
          | 4 - Automated Curated Playlist
  PlaylistWithTracks:
    type: object
    properties:
      id:
        type: integer
        description: identifier of playlist. Use this id to fetch playlist object
      profile_id:
        type: integer
        description: profile_id 0 means internal generated id
      created_at:
        type: string
        format: date-time
        description: timestamp of creation in iso8601 timestamp format
      updated_at:
        type: string
        format: date-time
        description: timestamp of last updated in iso8601 timestamp format
      images:
        $ref: '#/definitions/Image'
      playlist_type:
        type: integer
      tracks:
        type: array
        items:
          $ref: '#/definitions/Track'
      meta:
        $ref: '#/definitions/Pagination'
  PlaylistPersonalTracks:
    type: object
    properties:
      id:
        type: integer
        description: identifier of playlist. Use this id to fetch playlist object
      profile_id:
        type: integer
        description: profile_id 0 means internal generated id
      name:
        type: string
        description: Name of playlist
      created_at:
        type: string
        format: date-time
        description: timestamp of creation in iso8601 timestamp format
      updated_at:
        type: string
        format: date-time
        description: timestamp of last updated in iso8601 timestamp format
      images:
        $ref: '#/definitions/Image'
      playlist_type:
        type: integer
      tracks:
        type: array
        items:
          $ref: '#/definitions/TrackWithPlaylistTrackID'
      meta:
        $ref: '#/definitions/Pagination'
  TrackWithPlaylistTrackID:
    type: object
    properties:
      playlist_track_id:
        type: integer
        description: To support removal of track from playlist
      id:
        type: integer
      number:
        type: integer
        description: track number in the album (if available)
      title:
        type: string
        description: track title
      alt_title:
        type: string
        description: alternate title, used for search index
      lang_code:
        type: string
        description: language code of the track e.g en
      runtime:
        type: integer
        description: duration in seconds
      release_date:
        type: string
        format: date
        description: track release date
      has_video:
        type: boolean
        description: flag to indicate track has video
      genres:
        type: array
        items:
          type: string
      source:
        type: string
        description: source of recording
      images:
        $ref: '#/definitions/Image'
      video:
        $ref: '#/definitions/Video'
      artists:
        type: array
        items:
          $ref: '#/definitions/Artist'
      block:
        type: boolean
        description: true indicates track video can't be viewed due to Rules

  Track:
    type: object
    properties:
      id:
        type: integer
      number:
        type: integer
        description: track number in the album (if available)
      title:
        type: string
        description: track title
      alt_title:
        type: string
        description: alternate title, used for search index
      lang_code:
        type: string
        description: language code of the track e.g en
      runtime:
        type: integer
        description: duration in seconds
      release_date:
        type: string
        format: date
        description: track release date
      has_video:
        type: boolean
        description: flag to indicate track has video
      genres:
        type: array
        items:
          type: string
      source:
        type: string
        description: source of recording
      images:
        $ref: '#/definitions/Image'
      video:
        $ref: '#/definitions/Video'
      artists:
        type: array
        items:
          $ref: '#/definitions/Artist'
      block:
        type: boolean
        description: true indicates track video can't be viewed due to Rules

  TrackLyric:
    type: object
    properties:
      track_id:
        type: integer
        example: 130070
      is_original:
        type: boolean
        description: flag to indicate lyric in original language
        exmaple: true
      lang_code:
        type: string
        description: language code
        example: en
      lines:
        type: array
        description: line of lyrics
        items:
          type: string
          description: lyric line
          example: ["I’ve been hearin' symphonies", "Before, all I heard was silence", "A rhapsody for you and me", "And every melody is timeless"]


  Image:
    type: object
    properties:
      poster:
        type: object
        properties:
          url:
            type: string
            description: url of the image.
            example: https://charaku.imgix.net/defaults/artist.jpg?auto=compress,enhance

  Video:
    type: object
    properties:
      id:
        type: integer
        example: 128276
      artist_id:
        type: integer
        example: 27186
      title:
        type: string
        description: video title
        example: Symphony
      has_stream:
        type: boolean
        description: a flag to indicate whether video has encoded stream
        example: true
      vocal_channel:
        type: string
        example: left
      images:
        $ref: '#/definitions/Image'

  Stream:
    type: object
    properties:
      video_id:
        type: integer
      dash:
        type: object
        properties:
          video_id:
            type: integer
            description: video id
          p720:
            type: string
            description: mpeg-dash url of the stream
      hls:
        type: object
        properties:
          p720:
            type: string
            description: hls url of the tream

  Artist:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Eminem
      alt_name:
        type: string
        example: Eminem
      gender:
        type: string
        example: m
      lang_codes:
        type: array
        items:
          type: string
          description: artist can have more than 1 language codes e.g 'en', 'zh'
          example: en
      images:
        $ref: '#/definitions/Image'
      musixmatch_id:
        type: integer
        example: 1

  PlayQueue:
    type: object
    properties:
      user_id:
        type: integer
      updated_at:
        type: string
        format: date-time
      current:
        $ref: '#/definitions/PlayQueueObj'
      prev:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      next:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      priority:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      playlist_id:
        type: integer
        description: playlist id which the tracks belong to.
      play_queue_id:
        type: integer
        description: user's play queue id
      total_forward:
        type: integer
        description: total number of items to be played next (excluding previous played items)
      total:
        type: integer
        description: total number of all items in the play queue
      meta:
        type: object
        properties:
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  PlayTime:
    type: object
    properties:
      time_remaining:
        type: integer
        description: value in second
        example: 1790
      device_uid:
        type: string
        example: 87b103e49c7f7d03
      created_at:
        type: string
        format: date-time
        example: '2017-07-27T08:03:57Z'

  PlayTimePost:
    type: object
    properties:
      play_time:
        type: object
        properties:
          device_uid:
            type: string
            example: 87b103e49c7f7d03
          play_duration:
            type: integer
            description: value in second
            example: 10
          track_id:
            type: integer
            example: 1
          track_runtime:
            type: integer
            description: value in second
            example: 100

  PlayQueueObj:
    type: object
    properties:
      play_queue_track_id:
        type: integer
      track:
        $ref: '#/definitions/Track'
      position:
        type: integer
      added_by:
        type: object
        properties:
          name:
            type: string
            description: name of user
          profile_pic:
            type: string
            description: url of image

  PrevPlayQueueObj:
    type: object
    properties:
      prev:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      meta:
        type: object
        properties:
          total_forward:
            type: integer
            description: Total number of next items
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  Pagination:
    type: object
    properties:
      meta:
        type: object
        properties:
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  Success:
    type: object
    properties:
      success:
        type: string
        description: Success
        example: ok
  Error:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes

  ErrorUnauthorized:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
        example: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1401

  ErrorForbidden:
    type: object
    properties:
      errors:
        type: string
        description: Forbidden
        example: forbidden
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1403

  ErrorNotFound:
    type: object
    properties:
      errors:
        type: string
        description: Not found
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1404

  ErrorUnprocessable:
    type: object
    properties:
      errors:
        type: string
        description: Model validation error
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1407

# define reusable parameters:
parameters:
  includeBodyParams:
    name: include_body
    in: query
    description: Return play_queue body in response
    type: boolean
    required: false
  perPageParams:
    name: per_page
    in: query
    description: Number of resource returned
    type: integer
    required: false
  pageParams:
    name: page
    in: query
    description: Page number
    type: integer
    required: false
  playlistIncludesParams:
    name: includes
    in: query
    description: Eager load tracks in each playlist. e.g `includes=tracks`
    type: string
    required: false
  playlistLangParams:
    name: lang
    in: query
    description: language code e.g `en`, `ms`, `zh`
    type: string
    required: false
  playlistGenreParams:
    name: genres
    in: query
    description: genres e.g `pop`, `rock`, `rap`, `jazz`
    type: string
    required: false
  playlistArtistParams:
    name: artist_gender
    in: query
    description: valid values e.g 'm', 'f', 'mixed'
    required: false
    type: string
  trackIncludesParams:
    name: includes
    in: query
    description: Eager load tracks in each playlist. e.g `includes=tracks`
    type: string
    required: false
