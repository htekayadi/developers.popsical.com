swagger: '2.0'
info:
  title: Popsical V1 API
  version: "1"

  description: |
    Version 1
    --

    all endpoints path must be prefixed with `/v1`

    e.g https://api.popsical.tv/v1/genres.json

    Authentication
    --------------

    Popsical API uses OAuth2 to issue access token.

    All apps/client needs to be registered in order to access Popsical API endpoints.

    Once registered, you will receive

    `client_id` - Api Key as identifier of your app

    `secret` - Secret Key

    `callback_url` - as specified by client

    Pagination
    ---------

    Resources with meta object indicates the resource endpoint has pagination. For example the following:

    ```JSON
    {
      "resources": [],
      ..
      ..
      "meta": {
        "total": 3,
        "current_page": 1,
        "num_pages": 1,
        "per_page": 25
      }
    }
    ```


    `total` - total entries of items.

    `current_page` - the current page.

    `per_page` - load number of items per page. Default is set to 25 items.

    `num_pages` - number of pages available to paginate.


    You can use the following query paramters to paginate the resource and load 4 items per page

    `/v1/resources.json?per_page=4&page=2`


    Errors
    ------

    A failed call will always result in either HTTP status code of >= 400 or 500. Failed JSON requests will also contain a response containing an error message and error code:

    ```JSON
      { error: 'not found', err_code: 1404 }
    ```

    Code defensively and do not assume err_code will always be present. If you get a return without a err_code please tell us so that we can include one.


    Custom err_code
    ------------------

    1400 - missing parameters

    1404 - not found error

    1401 - not authorized

    1403 - forbidden

    1407 - entity validation error e.g uniqueness (value already taken), presence validation errors

    1408 - TV IP address is not available

    1409 - Play token generation failed

    1410 - Play token authorization failed

    1411 - Language code does not exist

    1412 - Track already exist in play queue.

    1413 - TV Device ID is missing

    1414 - Country access blocked

    1415 - Platform access blocked

    1416 - Premium access blocked

    1417 - Term has expired

    1500 - Internal server error

    Search
    ------

    We use algolia for search. Please refer to algolia API docs to perform search https://www.algolia.com/doc/rest-api/search/

    Requires Algolia API key to perform search.

# the domain of the service
host: api-staging.popsical.tv
# array of all schemes that your API supports
schemes:
  - https

# will be prefixed to all paths
basePath: /v1

securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://api-staging.popsical.tv/oauth/authorize'
    tokenUrl: 'https://api-staging.popsical.tv/oauth/token'
    scopes:
      public: "all public access"
      manage: "user resources"
      remote_mode: "device use as remote control for the TV"

produces:
  - application/json

consumes:
  - application/json

paths:
  /auth/token.json:
    get:
      summary: Fetch TV Auth Token
      description: |
        For the TV device to display the token to the user
        This short_code token expires within 10 minutes.
        You must notify user to go to the verification_url to activate this token.
      tags:
        - Auth
      parameters:
        - name: client_id
          in: query
          required: true
          type: string
      responses:
        200:
          description: Token Object. Short code to display on the TV
          schema:
            $ref: '#/definitions/AuthToken'

    post:
      summary: TV Auth Token Authorization
      description: |
        After the user signup, login & authorize the token using their computer's browser.
        Your device can attempt to login with a poll until you get a HTTP status 200 OK.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPost'
      tags:
        - Auth
      responses:
        200:
          description: OAuth Access Token
          schema:
            $ref: '#/definitions/AccessToken'

  /oauth/token:
    post:
      summary: Fetch new generated access token
      description: |
        Exceptional for this endpoint, no need to add prefix /v1.
        Example endpoint: https://api.popsical.tv/oauth/token
      tags:
        - Auth
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              refresh_token:
                type: string
                description: Token used to generate new access token
                example: ead4abe579f31c8819383d54c68e226aa8d3331a5c64e321669a1fcd9de8055e
              grant_type:
                type: string
                description: Grand request type
                example: refresh_token
              client_id:
                type: string
                description: Your app oauth client id
                example: 7eb4494c1eb42584b91cd81b506e4d2fd09ae75a69307c0ecc9c3f6a5a88c228
              client_secret:
                type: string
                description: Your app oauth client secret
                example: e9af1b1d1c23ab8f686a61ab35ef8541e2615a37b63c68a1827219d07c5e6af7
      responses:
        200:
          description: OAuth Access Token
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: Include this in header -H Authorization Bearer access_token
                example: e9d9054a3b303a5fdf9a175ed18d9296535ca4e34159c50edebca681b117f152
              refresh_token:
                type: string
                description: Use refresh token when access_token has expired
                example: 649f6471f13f020f7ae31a43fbf443d5d64d21fa8290f16a868f4001fb837061
              expires_in:
                type: integer
                description: expiry time of access token in second
                example: 14400
              scope:
                type: string
                description: Scope allowed accessing resources
                example: public manage
              token_type:
                type: string
                description: Token type
                example: bearer
              created_at:
                type: integer
                description: Date of creation in timemillis
                example: 1490868198

  /auth/sessions.json:
    post:
      summary: Signup/Login with Facebook and validating with Popsical AccessToken
      description: |
        HTTPS Only. To get a Facebook access token please refer to Facebook's documentation. Once client successfully authenticated to facebook. FB will return the client a facebook token.

        Please perform the following POST call so that we can register the new user to our users database. Implementation wise, the back-end server will call the FB api using the facebook access token to get user's email, first_name, last_name & facebook profile pic. If successful, http 200 will be returned. You can then fetch info of user using that token at access it at /me.json

        Ensure your client is requesting email permission & basic profile from facebook graph
      tags:
        - User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPostFB'
      responses:
        200:
          description: OAuth Access Token
          schema:
            $ref: '#/definitions/AccessToken'

  /users.json:
    post:
      summary: Create User
      description: |
        Register user via email and password
      tags:
        - User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              password_confirmation:
                type: string
              device_id:
                type: string
                description: Your mobile device unique id
              client_id:
                type: string
                description: OAuth client ID (API Key)
              scope:
                type: string
                description: relevant oauth scopes e.g 'public remote_mode'
      responses:
        200:
          description: OAuth Access Token
          schema:
            $ref: '#/definitions/AccessToken'
        422:
          description: model validation error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1407 }

  /users/forgot_password.json:
    post:
      summary: Request reset password
      description: |
        Request reset password instruction to be sent to email
      tags:
        - User
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: jonsnow@mail.com
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        422:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorNotFound'

  /me.json:
    get:
      summary: Fetch User Info
      description: The User Profile endpoint returns information about the user that has authorized with the application.
      tags:
        - User
        - Auth
      security:
        - OauthSecurity:
          - public
          - remote_mode
      responses:
        200:
          description: User & Profile information for a user
          schema:
            $ref: '#/definitions/User'
        401:
          description: Not Authorize
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "Not Authorized", "err_code": 1401 }
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "Forbidden", "err_code": 1403 }
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "Forbidden", "err_code": 1404 }

  /me/devices.json:
    post:
      summary: Create Device
      description: |
        Store the unique deviceID from the mobile device and associate it with the user
      tags:
        - User
        - Device
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DevicePost'
      security:
        - OauthSecurity:
          - manage
          - remote_mode
      responses:
        200:
          description: OAuth Access Token
          examples:
            application/json:
              {"success": "ok"}
        403:
          description: User forbidden
          schema:
            $ref: '#/definitions/ErrorForbidden'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorNotFound'
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/ErrorUnprocessable'

    patch:
      summary: Update Device
      description: |
        Update device parameter
      tags:
        - User
        - Device
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DevicePost'
      security:
        - OauthSecurity:
          - manage
          - remote_mode
      responses:
        200:
          description: OAuth Access Token
          examples:
            application/json:
              {"success": "ok"}
        403:
          description: User forbidden
          schema:
            $ref: '#/definitions/ErrorForbidden'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorNotFound'
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/ErrorUnprocessable'

  /artists.json:
    get:
      summary: Get Artists
      description: |
        Fetch array of artist objects
      tags:
        - Artist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
      security:
        - OauthSecurity:
          - manage
          - remote_mode
      responses:
        200:
          description: Object with artists array & meta pagination information
          schema:
            type: object
            properties:
              artists:
                type: array
                items:
                  $ref: '#/definitions/Artist'
              meta:
                $ref: '#/definitions/Pagination'
        403:
          description: User forbidden
          schema:
            $ref: '#/definitions/ErrorForbidden'
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/ErrorUnprocessable'

  /artists/{id}.json:
    get:
      summary: Get Artist Object
      description: |
        Fetch artist object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      tags:
        - Artist
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Artists with playlist & meta pagination information
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Eminem
              gender:
                type: string
                example: m
              lang_codes:
                type: array
                items:
                  type: string
                  description: artist can have more than 1 language codes e.g 'en', 'zh'
                  example: en
              images:
                $ref: '#/definitions/Image'
              musixmatch_id:
                type: integer
                example: 1
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'

  /playlists.json:
    get:
      summary: Get List of playlist
      description: |
        #### Filters

        Valid filters

        `lang` - Please refer `/v1/top_languages.json` for list of valid lang code.

        `genres` - Please refer to `v1/genres.json` for list of valid genres


        To eager load the tracks in the /playlists.json GET request, use the following:

        `includes=tracks`

        This will load maximum 8 tracks per playlists. It is advisable to use `per_page=8` to limit the number of playlist to load with the tracks. JSON can get really huge and may effect performance/network loading time.
        Please refer to `GET v1/playlist/:id.json` on handling playlists with tracks array object.

        Example usage:

        `/v1/playlists.json?lang=ms&genres=pop&artist_gender=f`
      tags:
        - Playlist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'
        - $ref: '#/parameters/playlistArtistParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'

  /playlists/{id}.json:
    get:
      summary: Get Playlist Object by ID
      parameters:
       - name: id
         in: path
         required: true
         type: integer
       - name: per_page
         in: query
         description: Number of playlist returned
         type: integer
       - name: page
         in: query
         description: Page number
         type: integer
      tags:
        - Playlist
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Playlist with tracks objects that can be paginated
          schema:
            type: object
            properties:
              tracks:
                type: array
                items:
                  $ref: '#/definitions/Track'
              meta:
                $ref: '#/definitions/Pagination'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

  /profiles/{id}.json:
    get:
      summary: Get Profile ID
      description: |
        Fetch user profile by ID
      tags:
        - Profile
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Profile object
          examples:
            application/json:
              {
                "id": 1,
                "name": "Fadhli",
                "playlists": [
                  {
                    "id": 1,
                    "profile_id": 1,
                    "name": "Playlist 1",
                    "created_at": "2016-02-16T05:39:40Z",
                    "updated_at": "2016-02-16T05:39:40Z"
                  }
                ]
              }
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

    delete:
      summary: Delete Profile
      description: |
        Delete a profile for the current logged in user.
        A user can't delete all of their profile. Must have at least one profile
      tags:
        - Profile
      security:
        - OauthSecurity:
          - manage
      parameters:
        - name: id
          in: path
          type: integer
          required: true
      responses:
        200:
          description: delete profile successful
          examples:
            application/json:
              {
                "success": "ok"
              }
        422:
          description: database returns error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "validation error", "err_code": 1407 }

    patch:
      summary: Update Profile
      description: |
        Update profile details
      tags:
        - Profile
      security:
        - OauthSecurity:
          - manage
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              profile:
                type: object
                properties:
                  name:
                    type: string
      responses:
        200:
          description: Profile object
          examples:
            application/json:
              {
                "id": 1,
                "name": "updated-profile-name"
              }
        422:
          description: database returns error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "validation error", "err_code": 1407 }


  /profiles/{profile_id}/playlists.json:
    get:
      summary: Fetch Profile's Playlist
      description: |
        A user has at least 1 default playlist
      tags:
        - Profile
        - Playlist
      parameters:
        - name: profile_id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'

      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'

  /profiles/{profile_id}/playlists/{playlist_id}/tracks.json:
    post:
      summary: Add Track into Playlist
      description: |
        Add track to user's profile playlist.
        Replace :profile_id and :playlist_id with values to form the POST url
      parameters:
        - name: profile_id
          in: path
          required: true
          type: integer
          description: profile id
        - name: playlist_id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              playlists:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      type: integer
                      description: array of track_id
      tags:
        - Profile
        - Playlist
      responses:
        200:
          description: success
          examples:
            application/json:
              {
                "success": "ok"
              }

    delete:
      summary: Remove Track from Playlist
      description: |
        Remove track from user's profile playlist
      tags:
        - Profile
        - Playlist
      parameters:
        - name: profile_id
          in: path
          required: true
          type: string
          description: profile id
        - name: playlist_id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              playlists:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      type: integer
                      description: track_id
      responses:
        200:
          description: success
          examples:
            application/json:
              {
                "success": "ok"
              }

  /profiles.json:
    get:
      summary: Fetch List of Profile
      description: |
        Returns an array of profiles belong to the current logged in user
      tags:
        - Profile
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Profile array
          examples:
            application/json:
              {
                "profiles": [
                  {
                    "id": 1,
                    "name": "Fadhli"
                  }
                ]
              }
        404:
          description: User not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1404 }

    post:
      summary: Create Profile
      description: |
        Create a profile for the current logged in user
      tags:
        - Profile
      security:
        - OauthSecurity:
          - manage
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              profile:
                type: object
                properties:
                  name:
                    type: string
      responses:
        200:
          description: Profile array
          examples:
            application/json:
              {
                "id": 1,
                "name": "profile-name"
              }
        422:
          description: database returns error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "validation error", "err_code": 1407 }


  /genres/{genre}.json:
    get:
      summary: Fetch Playlist by Genre
      description: |
        Genres Resources
        ----------------

        Fetch all playlists available under specific playlist

        Official default genres:
        ------------------------

        `"pop", "rock", "r&b", "rap", "country", "dance"`

        Examples:

        ```
        GET /v1/genres/pop.json

        GET /v1/genres/rock.json

        GET /v1/genres/r&b.json

        GET /v1/genres/rap.json

        GET /v1/genres/country.json

        GET /v1/genres/dance.json
        ```
        ___

        Acceptable query parameter for this endpoint is lang

        Available lang codes:

        `
        'en', 'zh', 'ms', 'id'
        `

        Usage:

        `GET /v1/genres/pop.json?lang=en`
      tags:
        - Playlist
        - Genre
      parameters:
        - name: genre
          in: path
          required: true
          description: genre
          type: string
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'

  /lists/popular.json:
    get:
      summary: Get Popular Playlists
      description: |
        returns an array of popular playlists sorted by popularity
      tags:
        - Playlist
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistIncludesParams'
        - $ref: '#/parameters/playlistLangParams'
        - $ref: '#/parameters/playlistGenreParams'
        - $ref: '#/parameters/playlistArtistParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with playlists array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Playlist'
              meta:
                $ref: '#/definitions/Pagination'

  /tracks.json:
    get:
      summary: Get Tracks
      description: |
        Fetch array of track objects
      tags:
        - Track
      parameters:
        - $ref: '#/parameters/perPageParams'
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/playlistGenreParams'
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            type: object
            properties:
              tracks:
                type: array
                items:
                  $ref: '#/definitions/Track'
              meta:
                $ref: '#/definitions/Pagination'

  /tracks/{id}.json:
    get:
      summary: Get Track Object
      description: |
        Fetch track object
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      tags:
        - Track
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Object with tracks array & meta pagination information
          schema:
            $ref: '#/definitions/Track'

  /tracks/request.json:
    post:
      summary: Create Track Request
      description: |
        Create a track request to be added in track list
      tags:
        - Track Request
      security:
        - OauthSecurity:
          - public
          - remote_mode
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              artist_name:
                type: string
              sample_link:
                type: string
      responses:
        200:
          description: Track Request created
          examples:
            application/json:
              {"success": "ok"}
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1407 }

  /tracks/report.json:
    post:
      summary: Create Track Report
      description: |
        Reason example:

        [1] Vocals too soft

        [2] Music too loud

        [3] No vocals

        [4] No music

        [5] No sound at all

        [6] Vocals and music out of sync

        [7] Channel 1 and 2 are exactly the same

        [8] Video keeps lagging severely

        [9] Song title is incorrect or corrupted

        [10] Two songs are playing simultaneously

        [11] Video content is too violent

        [12] Video content is too sexual

        [13] Video content is incorrect
      tags:
        - Track Report
      security:
        - OauthSecurity:
          - public
          - remote_mode
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              track_id:
                type: integer
                example: 1
              reason:
                type: array
                example: [1, 2, 3, 4]
              device_uid:
                type: string
                example: b540e4fd7fcf00b1
              device_type:
                type: string
                example: remote
              correct_song_title:
                type: string
                example: Happy New Year
              other_feedback:
                type: string
                example: No subtitle
      responses:
        200:
          description: Track Report created
          examples:
            application/json:
              {"success": "ok"}
        422:
          description: Model validation error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {"errors": "not_found", "err_code": 1407 }

  /me/play_queue.json:
    get:
      summary: Get Play Queue
      description: Fetch current user play queue
      parameters:
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/perPageParams'
      security:
        - OauthSecurity:
          - public
      tags:
        - PlayQueue
      responses:
        200:
          description: PlayQueue with PlayQueueTracks array
          schema:
            $ref: '#/definitions/PlayQueue'
    post:
      summary: Post PlayQueue
      description: |
        Endpoint to update the play queue current, next, previous values
        Called each time after playing new video
      tags:
        - PlayQueue
      parameters:
        - name:  body
          in: body
          schema:
            type: object
            properties:
              queue:
                type: object
                properties:
                  track_id:
                    type: integer
                    description: when there is no `play_queue_track_id`, provide `track_id`
                  playlist_id:
                    type: integer
                  play_queue_track_id:
                    type: integer
      security:
        - OauthSecurity:
          - manage
      responses:
        200:
          description: PlayQueue Object
          schema:
            $ref: '#/definitions/PlayQueue'

  /me/play_queue/current.json:
    get:
      summary: Get current play queue track
      description: |
        Only returns the current track in the play queue json object
      security:
        - OauthSecurity:
          - public
      tags:
        - PlayQueue
      responses:
        200:
          description: Current object
          schema:
            type: object
            properties:
              current:
                $ref: '#/definitions/PlayQueueObj'
              playlist_id:
                type: integer

  /me/play_queue/previous.json:
    get:
      summary: Get previous play queue tracks
      description: |
        Only returns the previous tracks in the play queue json array object
      parameters:
        - $ref: '#/parameters/pageParams'
        - $ref: '#/parameters/perPageParams'
      security:
        - OauthSecurity:
          - public
      tags:
        - PlayQueue
      responses:
        200:
          description: Current object
          schema:
            $ref: '#/definitions/PrevPlayQueueObj'

  /me/play_queue/tracks.json:
    post:
      summary: Add track(s) to the play queue
      description: |
        Add tracks to play queue
      security:
        - OauthSecurity:
          - manage
      tags:
        - PlayQueue
      parameters:
        - name: force_add
          in: query
          required: false
          type: boolean
          description: Set to true to force add track into play queue
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              queue:
                type: array
                items:
                  type: object
                  properties:
                    track_id:
                      type: integer
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}
        422:
          description: |
            - Duplicate track already exist in play queue. Use force_add=true in query paramters to add anyway.
              * 1412 - Track already exist! Use 'force_add=true' to add anyway
            - Adding track is blocked for reason.
              * 1414 - Country access blocked
              * 1415 - Platform access blocked
              * 1416 - Premium access blocked
              * 1417 - Term has expired
          examples:
            application/json:
              { "errors": "Track already exist! Use 'force_add=true' to add anyway", "err_code": 1412 }

    patch:
      summary: Update position of tracks in play queue
      description: Bulk update position of tracks in play queue
      security:
        - OauthSecurity:
          - public
      tags:
        - PlayQueue
      parameters:
        - $ref: '#/parameters/includeBodyParams'
        - name: body
          in: body
          schema:
            type: object
            properties:
              queue:
                type: array
                items:
                  type: object
                  properties:
                    position:
                      type: integer
                    play_queue_track_id:
                      type: integer
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              {"success": "ok"}
    delete:
      summary: Delete Track from PlayQueue
      description: |
        Remove Tracks from PlayQueueTracks
      security:
        - OauthSecurity:
          - manage
      tags:
        - PlayQueue
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              queue:
                type: array
                items:
                  type: object
                  properties:
                    play_queue_track_id:
                      type: integer
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}

  /me/play_queue/delete_all.json:
    delete:
      summary: Delete all play queue tracks
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - manage
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}

  /me/play_queue/last.json:
    patch:
      summary: Update current pointer to the first track of the play queue
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - manage
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}

  /me/play_queue/add_next.json:
    post:
      summary: Add track to the next position of current track
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - manage
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              track_id:
                type: integer
                example: 1
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok", "is_current": true}
        422:
          description: |
            Adding track is blocked for reason.
            * 1414 - Country access blocked
            * 1415 - Platform access blocked
            * 1416 - Premium access blocked
            * 1417 - Term has expired
          examples:
            application/json:
              { "errors": "Country access blocked", "err_code": 1414 }

  /me/play_queue/set_next.json:
    patch:
      summary: Update track to the next position of current track
      tags:
        - PlayQueue
      security:
          - OauthSecurity:
            - manage
      parameters:
          - name: body
            in: body
            schema:
              type: object
              properties:
                play_queue_track_id:
                  type: integer
                  example: 1
      responses:
        200:
          description: returns ok
          examples:
            application/json:
              { "success": "ok"}

  /play_queue/token.json:
    get:
      summary: Show PlayQueue Auth Token
      description: |
        TV app play queue can be managed (add,delete,patch tracks in play queue)
        TV app devices information must be linked to the current_user.
        See POST,PATCH `/v1/devices.json` to create,update current_user TV device
      parameters:
        - name: device_id
          in: query
          required: true
          type: string
          description: TV App unique deviceID
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - public
          - manage
      responses:
        200:
          description: returns short code & expiry time
          schema:
            type: object
            properties:
              short_code:
                type: string
              expires_in:
                type: integer
          examples:
            application/json:
              {
                "short_code": "QNHTPP",
                "expires_in": 600
              }
    delete:
      summary: Unpair TV App <-> Mobile App Link
      description: |
        Delete token that links the remote app with the TV
      tags:
        - PlayQueue
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              device_id:
                type: string
                description: your unique mobile device id
                example: D6DD92BA-232C-4A62-87F3-72601E847F88
        - name: Authorization
          in: header
          description: |
            Provide access_token when user logged in email/password or fb
            to properly linked signed in user to TV app
          type: string
          required: false
          format: string
      responses:
        200:
          description: delete play queue token successfully
          examples:
            application/json:
              {
                "success": "ok"
              }
        204:
          description: no applicable play queue token found
          examples:
            application/json:
              {"success": "ok"}

  /play_queue/authorize.json:
    post:
      summary: Authorize TV App <-> Mobile App Link
      description: |
        To link the remote app with the TV use the short_code returned by GET `/v1/play_queue/token.json`
        along with other required parameters in POST body.

        (Optional) Provide 'Authorization' with access_token value in header for mobile clients logged_in via facebook or email.
        This will ensure logged_in fb user session is maintain through out session
      tags:
        - PlayQueue
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              short_code:
                type: string
              device_id:
                type: string
                description: your unique mobile device id
              device_name:
                type: string
                description: your mobile device name
              client_id:
                type: string
                description: OAuth client_id key
        - name: Authorization
          in: header
          description: |
            (Optional) Provide access_token when user logged in email/password or fb
            to properly linked signed in user to TV app
          type: string
          required: false
          format: string
      responses:
        200:
          description: custom access token with tv app ip_address & port
          schema:
            $ref: '#/definitions/AccessTokenTV'
          examples:
            application/json:
              {
                "access_token": "token",
                "refresh_token": "token",
                "expires_in": 14400,
                "scope": "public remote_mode",
                "play_queue_id": 1,
                "tv_uid": "tv_uid",
                "tv_ip_address": "192.168.1.1",
                "tv_port": 8080
              }
        401:
          description: Not Authorize
          schema:
            $ref: '#/definitions/ErrorUnauthorized'

  /play_queue/devices.json:
    get:
      summary: Get all devices connected to TV app
      description: |
        Returns all valid devices connected to TV app.

        Expired devices will not show.
      tags:
        - PlayQueue
      security:
        - OauthSecurity:
          - public
      responses:
        200:
          description: Device information
          schema:
            type: object
            properties:
              tv_device:
                type: object
                properties:
                  device_id:
                    type: string
                    example: 734b7f315b2952f8
                  ip_address:
                    type: string
                    example: 10.0.0.126
                  port:
                    type: integer
                    example: 8080
              devices:
                type: array
                items:
                  type: object
                  properties:
                    device_id:
                      type: string
                      example: 7e3e043607dcd148
                    name:
                      type: string
                      example: 5c9774bc
        422:
          description: Device not found
          schema:
            type: object
            properties:
              errors:
                type: string
                description: Device not found
                example: device not found
              err_code:
                type: integer
                description: refer to internal error codes
                example: 1404

  /genres.json:
    get:
      summary: Lookup available genres
      description: |
        Recommended usage:

        Treat this as a reference endpoint so you can call this once and store locally as a hash table

        Examples:

        ```
        {
         "pop":{
            "name":{
              "en":"Pop",
              "zh":"流行",
              "zt":"流行",
              "ho":"流行",
              "yue":"流行"
            },
            "position":0,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/pop.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_pop.png?auto=compress"
         },
         "rock":{
            "name":{
              "en":"Rock",
              "zh":"摇滚",
              "zt":"搖滾",
              "ho":"搖滾",
              "yue":"搖滾"
            },
            "position":1,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/rock.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_rock.png?auto=compress"
         },
         "r&b":{
            "name":{
              "en":"R&B",
              "zh":"节奏蓝调",
              "zt":"節奏藍調",
              "ho":"節奏藍調",
              "yue":"節奏藍調"
            },
            "position":2,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/R_B.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_r_n_b.png?auto=compress"
         },
         "country":{
            "name":{
              "en":"Country",
              "zh":"乡村",
              "zt":"鄉村",
              "ho":"鄉村",
              "yue":"鄉村"
            },
            "position":3,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/country.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_country.png?auto=compress"
         },
         "rap":{
            "name":{
              "en":"Rap",
              "zh":"嘻哈",
              "zt":"嘻哈",
              "ho":"嘻哈",
              "yue":"嘻哈"
            },
            "position":4,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/rap.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/rap.png?auto=compress"
         },
         "jazz":{
            "name":{
              "en":"Jazz",
              "zh":"爵士乐",
              "zt":"爵士樂",
              "ho":"爵士樂",
              "yue":"爵士樂"
            },
            "position":5,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/jazz.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/jazz.png?auto=compress"
         },
         "edm":{
            "name":{
              "en":"EDM",
              "zh":"电子舞曲",
              "zt":"電子舞曲",
              "ho":"電子舞曲",
              "yue":"電子舞曲"
            },
            "position":6,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/edm.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/edm.png?auto=compress"
         },
         "acoustic":{
            "name":{
              "en":"Acoustic",
              "zh":"原音乐",
              "zt":"原音樂",
              "ho":"原音樂",
              "yue":"原音樂"
            },
            "position":7,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/acoustic.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/acoustic.png?auto=compress"
         },
         "soundtrack":{
            "name":{
              "en":"Soundtrack",
              "zh":"影视配乐",
              "zt":"影視配樂",
              "ho":"影視配樂",
              "yue":"影視配樂"
            },
            "position":8,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/soundtrack.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/soundtrack.png?auto=compress"
         },
         "indie":{
            "name":{
              "en":"Indie",
              "zh":"独立小品",
              "zt":"獨立小品",
              "ho":"獨立小品",
              "yue":"獨立小品"
            },
            "position":9,
            "poster_url":"https://charaku.imgix.net/defaults/genre_bg/indie.jpg?auto=compress",
            "icon_url":"https://charaku.imgix.net/defaults/genre_icons/indie.png?auto=compress"
         }
        }
        ```
        ___

      tags:
        - Genre
      responses:
        200:
          description: Object of genres available
          examples:
            application/json:
              {"pop":{"name":{"en":"Pop","zh":"流行","zt":"流行"},"position":0,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/pop.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_pop.png?auto=compress"},"rock":{"name":{"en":"Rock","zh":"摇滚","zt":"搖滾"},"position":1,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/rock.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_rock.png?auto=compress"},"r\u0026b":{"name":{"en":"R\u0026B","zh":"节奏蓝调","zt":"節奏藍調"},"position":2,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/R_B.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_r_n_b.png?auto=compress"},"country":{"name":{"en":"Country","zh":"乡村","zt":"鄉村"},"position":3,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/country.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/ic_country.png?auto=compress"},"rap":{"name":{"en":"Rap","zh":"嘻哈","zt":"嘻哈"},"position":4,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/rap.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/rap.png?auto=compress"},"jazz":{"name":{"en":"Jazz","zh":"爵士乐","zt":"爵士樂"},"position":5,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/jazz.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/jazz.png?auto=compress"},"edm":{"name":{"en":"EDM","zh":"电子舞曲","zt":"電子舞曲"},"position":6,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/edm.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/edm.png?auto=compress"},"acoustic":{"name":{"en":"Acoustic","zh":"原音乐","zt":"原音樂"},"position":7,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/acoustic.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/acoustic.png?auto=compress"},"soundtrack":{"name":{"en":"Soundtrack","zh":"影视配乐","zt":"影視配樂"},"position":8,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/soundtrack.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/soundtrack.png?auto=compress"},"indie":{"name":{"en":"Indie","zh":"独立小品","zt":"獨立小品"},"position":9,"poster_url":"https://charaku.imgix.net/defaults/genre_bg/indie.jpg?auto=compress","icon_url":"https://charaku.imgix.net/defaults/genre_icons/indie.png?auto=compress"}}
  /top_languages.json:
    get:
      summary: Get available languages
      description: |
        Recommended usage:

        Treat this as a reference endpoint so you can call this once and store locally as a hash table
      tags:
        - Meta
        - Languages
      responses:
        200:
          description: available content languages
          examples:
            application/json:
              {"en":{"direction":"ltr","native_name":"English","name":{"en":"English","ja":"英語","es":"Inglés","fr":"Anglais","zh":"英语","zt":"英語"}},"zh":{"direction":"ltr","native_name":"简体中文","name":{"en":"Chinese(简体)","ja":"中国語（簡体字）","es":"Chino Simplificado","fr":"Chinois(简体)","zh":"简体中文","zt":"簡體中文"}},"ms":{"direction":"ltr","native_name":"Bahasa Melayu","name":{"en":"Malay","ja":"マレー語","es":"Malayo","fr":"Malais","zh":"马来语","zt":"馬來語"}},"id":{"direction":"ltr","native_name":"BahasaIndonesia","name":{"en":"Indonesian","ja":"インドネシア語","es":"Indonesio","fr":"Indonésien","zh":"印尼语","zt":"印度尼西亞語"}}}

  /subscriptions/status.json:
    get:
      summary: Fetch subscription status
      description: |
        Fetch subscription status
      tags:
        - Subscription
      security:
        - OauthSecurity:
          - public
          - remote_mode
      responses:
        200:
          description: Object with status information
          schema:
            $ref: '#/definitions/SubscriptionObj'
        401:
          description: User unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'

  /subscriptions/card.json:
    post:
      summary: Send payment method information
      description: |
        Send payment method information
      tags:
        - Subscription
      parameters:
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: John
              last_name:
                type: string
                example: Snow
              number:
                type: string
                description: Card number
                example: 4111111111111111
              expiry_month:
                type: integer
                example: 10
              expiry_year:
                type: integer
                example: 2022
              cvv:
                type: string
                example: 999
              country:
                type: string
                description: Country code
                example: SG
        - name: Authorization
          in: header
          description: |
            Provide access_token with manage scope
          type: string
          required: true
          format: string
      responses:
        200:
          description: Object with subscription status information
          schema:
            type: object
            properties:
              success:
                type: string
                example: "ok"
        401:
          description: User unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'

  /subscriptions/plan/checkout.json:
    post:
      summary: Subscribe to Premium plan and charge payment
      description: |
        Subscribe to Premium plan and charge payment
      tags:
        - Subscription
      parameters:
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            type: object
            properties:
              plan_id:
                type: string
                example: popsical-premium
              first_name:
                type: string
                example: John
              last_name:
                type: string
                example: Snow
              line1:
                type: string
                description: Address Line 1
                example: Yishun New Town
              city:
                type: string
                example: Singapore
              zip:
                type: string
                example: 760743
              state:
                type: string
                example: Singapore
              phone:
                type: string
                example: 70744420
              coupon_id:
                type: string
                example: popsical-24-hour
        - name: Authorization
          in: header
          description: |
            Provide access_token with manage scope
          type: string
          required: true
          format: string
      responses:
        200:
          description: Object with subscription status information
          schema:
            $ref: '#/definitions/SubscriptionObj'
        401:
          description: User unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'

  /subscriptions/addon/charge.json:
    post:
      summary: Charge payment for addon
      description: |
        Charge payment for addon
      tags:
        - Subscription
      parameters:
        - name: body
          in: body
          description: Body parameter in JSON format
          required: true
          schema:
            type: object
            properties:
              addon_id:
                type: string
                example: popsical-24-hour
        - name: Authorization
          in: header
          description: |
            Provide access_token with manage scope
          type: string
          required: true
          format: string
      responses:
        200:
          description: Object with subscription status information
          schema:
            $ref: '#/definitions/SubscriptionObj'
        401:
          description: User unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'

  /app_version.json:
    get:
      summary: Get latest version code & number of the client_id app
      description: |
        Device clients can check if user has the latest version of the app
      tags:
        - System
      parameters:
        - name: client_id
          in: query
          required: true
          type: string
      responses:
        200:
          description: Returns json object
          schema:
            type: object
            properties:
              version_name:
                type: string
              version_code:
                type: integer
              url:
                type: string
                description: Signed url for download. Expires after 30 minutes.
              created_at:
                type: string
                format: date-time
  /events/play.json:
    post:
      summary: Tracking video play event
      description: |
        Client must post this on every video start once
      tags:
        - Event
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              track_id:
                type: integer
              playlist_id:
                type: integer
      responses:
        200:
          description: |
            Returns OK {'success': 'ok'}
  /events/stop.json:
    post:
      summary: Tracking video stop event
      description: |
        Client must post this on every video stop once
      tags:
        - Event
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              track_id:
                type: integer
              playlist_id:
                type: integer
              play_duration:
                type: integer
      responses:
        200:
          description: |
            Returns OK {'success': 'ok'}

definitions:
  AuthToken:
    type: object
    properties:
      short_code:
        type: string
        description: Short code to display on the TV
        example: QNHTPP
      nonce:
        type: string
        description: Secure key to verify short code
        example: d7f303ca-dc6f-445d-8cb2-c338c87b3d9d
      verification_url:
        type: string
        description: Url for user to go to verify account & TV
        example: https://app.popsical.tv
      expires_in:
        type: integer
        description: Value in seconds until auth token expires
        example: 600
  AuthTokenPost:
    type: object
    properties:
      short_code:
        type: string
        description: Short code displayed on TV
        example: QNHTPP
      nonce:
        type: string
        description: Secure key to verify short code
        example: d7f303ca-dc6f-445d-8cb2-c338c87b3d9d
      device_id:
        type: string
        description: Your mobile android unique id
        example: popsical-tv
      client_id:
        type: string
        description: Your app oauth client id
        example: 7eb7794c1eb43584b91cd81b507e4d2fd09ae75a69307c0ecc9c3f6a5a88c338
  AuthTokenPostFB:
    type: object
    properties:
      facebook_token:
        type: string
        description: Facebook token
      device_id:
        type: string
        description: Your mobile android unique id
      client_id:
        type: string
        description: Your app oauth client id
      scope:
        type: string
        description: Oauth scope permission e.g public remote_mode
  AccessToken:
    type: object
    properties:
      access_token:
        type: string
        description: Include this in header -H Authorization Bearer access_token
        example: e9d9054a3b303a5fdf9a175ed18d9296535ca4e34159c50edebca681b117f152
      refresh_token:
        type: string
        description: Use refresh token when access_token has expired
        example: 649f6471f13f020f7ae31a43fbf443d5d64d21fa8290f16a868f4001fb837061
      expires_in:
        type: string
        description: timestamp of access token expiry
        example: 14400
      scope:
        type: string
        description: Scope allowed accessing resources
        example: public manage
  AccessTokenTV:
    title: AccessTokenTv
    type: object
    allOf:
      - $ref: '#/definitions/AccessToken'
      - properties:
          play_queue_id:
            type: integer
          tv_uid:
            type: string
          tv_ip_address:
            type: string
          tv_port:
            type: integer
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        example: jonsnow@mail.com
      first_name:
        type: string
        example: Jon
      last_name:
        type: string
        example: Snow
      profile_pic:
        type: string
        example: https://img/700b.jpg
      premium:
        type: boolean
        example: true
      profiles:
        type: array
        items:
          $ref: '#/definitions/Profile'
      devices:
        type: array
        items:
          $ref: '#/definitions/Device'
  Profile:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        description: profile name
        example: Fadhli
      playlist_id:
        type: integer
        description: User has 1 default playlist id
        example: 9
      history_playlist_id:
        type: integer
        description: History playlist id
        example: 1
      urls:
        type: object
        properties:
          playlists:
            type: string
            description: user playlists url
            example: https://app.popsical.tv/v1/profiles/1/playlists.json
  Device:
    type: object
    properties:
      device_uid:
        type: string
        description: unique mobile device identifier
        example: device-id
      device_token:
        type: string
        description: unique token related to push notification
        example: abc123
      ip_address:
        type: string
        example: 192.168.1.1
      mac_address:
        type: string
        example: f2:b7:2a:5d:bf:1d
      ethernet_mac:
        type: string
        example: f2:b7:2a:5d:bf:1d
      port:
        type: integer
        example: 8080
      os:
        type: string
        example: android
      os_version:
        type: string
        example: 23
      type:
        type: string
        description: valid values e.g tv, remote
        example: tv

  DevicePost:
    type: object
    properties:
      device:
        $ref: '#/definitions/Device'

  Playlist:
    type: object
    properties:
      id:
        type: integer
        description: identifier of playlist. Use this id to fetch playlist object
      profile_id:
        type: integer
        description: profile_id 0 means internal generated id
      created_at:
        type: string
        format: date-time
        description: timestamp of creation in iso8601 timestamp format
      updated_at:
        type: string
        format: date-time
        description: timestamp of last updated in iso8601 timestamp format
      position:
        type: integer

  Track:
    type: object
    properties:
      id:
        type: integer
      number:
        type: integer
        description: track number in the album (if available)
      title:
        type: string
        description: track title
      alt_title:
        type: string
        description: alternate title, used for search index
      lang_code:
        type: string
        description: language code of the track e.g en
      runtime:
        type: integer
        description: duration in seconds
      release_date:
        type: string
        format: date
        description: track release date
      has_video:
        type: boolean
        description: flag to indicate track has video
      genres:
        type: array
        items:
          type: string
      source:
        type: string
        description: source of recording
      images:
        $ref: '#/definitions/Image'
      musixmatch_id:
        type: integer
      musixmatch_lyrics_id:
        type: integer
      musixmatch_subtitle_id:
        type: integer
      video:
        $ref: '#/definitions/Video'
      artists:
        type: array
        items:
          $ref: '#/definitions/Artist'
      block:
        type: boolean
        description: true indicates track video can't be viewed due to Rules
      premium:
        type: boolean
        description: indicates the track is marked as premium content

  Image:
    type: object
    properties:
      poster:
        type: object
        properties:
          url:
            type: string
            description: url of the image.
            example: https://charaku.imgix.net/defaults/artist.jpg?auto=compress,enhance

  Video:
    type: object
    properties:
      id:
        type: integer
      artist_id:
        type: integer
      title:
        type: string
        description: video title
      has_stream:
        type: boolean
        description: a flag to indicate whether video has encoded stream
      images:
        $ref: '#/definitions/Image'
      dash:
        type: object
        properties:
          p720:
            type: string
            description: mpeg-dash url of the stream
      hls:
        type: object
        properties:
          p720:
            type: string
            description: hls url of the tream

  Artist:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Eminem
      alt_name:
        type: string
        example: Eminem
      gender:
        type: string
        example: m
      lang_codes:
        type: array
        items:
          type: string
          description: artist can have more than 1 language codes e.g 'en', 'zh'
          example: en
      images:
        $ref: '#/definitions/Image'
      musixmatch_id:
        type: integer
        example: 1

  PlayQueue:
    type: object
    properties:
      user_id:
        type: integer
      updated_at:
        type: string
        format: date-time
      current:
        $ref: '#/definitions/PlayQueueObj'
      prev:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      next:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      priority:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      playlist_id:
        type: integer
        description: playlist id which the tracks belong to.
      play_queue_id:
        type: integer
        description: user's play queue id
      total_forward:
        type: integer
        description: total number of items to be played next (excluding previous played items)
      total:
        type: integer
        description: total number of all items in the play queue
      meta:
        type: object
        properties:
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  PlayQueueObj:
    type: object
    properties:
      play_queue_track_id:
        type: integer
      track:
        $ref: '#/definitions/Track'
      position:
        type: integer
      added_by:
        type: object
        properties:
          name:
            type: string
            description: name of user
          profile_pic:
            type: string
            description: url of image

  SubscriptionObj:
    type: object
    properties:
      subscription_id:
        type: string
        example: Hr550zgQQlNsUCH2f
      status:
        type: string
        example: "Active"
      plan:
        type: string
        example: "Popsical Premium"
      premium:
        type: boolean
        example: true

  PrevPlayQueueObj:
    type: object
    properties:
      prev:
        type: array
        items:
          $ref: '#/definitions/PlayQueueObj'
      meta:
        type: object
        properties:
          total_forward:
            type: integer
            description: Total number of next items
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  Pagination:
    type: object
    properties:
      total:
        type: integer
        description: Total number of items
      current_page:
        type: integer
        description: Current page
      num_pages:
        type: integer
        description: Total of number of pages available to paginate
      per_page:
        type: integer
        description: Number of items available per page

  Success:
    type: object
    properties:
      success:
        type: string
        description: Success
        example: ok
  Error:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes

  ErrorUnauthorized:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
        example: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1401

  ErrorForbidden:
    type: object
    properties:
      errors:
        type: string
        description: Forbidden
        example: forbidden
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1403

  ErrorNotFound:
    type: object
    properties:
      errors:
        type: string
        description: Not found
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1404

  ErrorUnprocessable:
    type: object
    properties:
      errors:
        type: string
        description: Model validation error
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1407

# define reusable parameters:
parameters:
  perPageParams:
    name: per_page
    in: query
    description: Number of playlist returned
    type: integer
    required: false
  pageParams:
    name: page
    in: query
    description: Page number
    type: integer
    required: false
  playlistIncludesParams:
    name: includes
    in: query
    description: Eager load tracks in each playlist. e.g `includes=tracks`
    type: string
    required: false
  playlistLangParams:
    name: lang
    in: query
    description: language code e.g `en`, `ms`, `zh`
    type: string
    required: false
  playlistGenreParams:
    name: genres
    in: query
    description: genres e.g `pop`, `rock`, `rap`, `jazz`
    type: string
    required: false
  playlistArtistParams:
    name: artist_gender
    in: query
    description: valid values e.g 'm', 'f', 'mixed'
    required: false
    type: string
  includeBodyParams:
    name: include_body
    in: query
    description: Return play_queue body in response
    type: boolean
    required: false